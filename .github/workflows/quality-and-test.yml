name: Quality & Testing

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  workflow_dispatch:

permissions:
  actions: write
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  formatting:
    name: Code Formatting Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Check EditorConfig compliance
        uses: editorconfig-checker/action-editorconfig-checker@main

      - name: Run EditorConfig checker with exclusions
        run: editorconfig-checker -exclude 'Cargo\.lock|dist/.*|.*\.(md|icns|ico|png|jpg|jpeg|gif|svg|desktop|wxs|plist|toml)$|cli\.js$|node_modules/.*|target/.*|src-tauri/(target|icons|png)/.*'

      - name: Check Prettier formatting
        run: npx prettier --check . --ignore-unknown

  rust-quality:
    name: Rust Code Quality
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false
    defaults:
      run:
        shell: bash
        working-directory: src-tauri
    steps:
      - uses: actions/checkout@v4

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt, clippy

      - uses: rui314/setup-mold@v1
        if: matrix.os == 'ubuntu-latest'

      - uses: taiki-e/install-action@v1
        with:
          tool: cargo-hack

      - name: Install Ubuntu dependencies
        if: matrix.os == 'ubuntu-latest'
        uses: awalsh128/cache-apt-pkgs-action@v1.4.3
        with:
          packages: libdbus-1-dev libsoup-3.0-dev libjavascriptcoregtk-4.1-dev libwebkit2gtk-4.1-dev build-essential curl wget file libxdo-dev libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev gnome-video-effects gnome-video-effects-extra
          version: 1.0

      - name: Check Rust formatting
        run: cargo fmt --all -- --color=always --check

      - name: Run Clippy lints
        run: cargo hack --feature-powerset --exclude-features cli-build --no-dev-deps clippy

  cli-tests:
    name: CLI Tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "npm"

      - name: Install Rust (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: x86_64-unknown-linux-gnu

      - name: Install Rust (Windows)
        if: matrix.os == 'windows-latest'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable-x86_64-msvc
          target: x86_64-pc-windows-msvc

      - name: Install Rust (macOS)
        if: matrix.os == 'macos-latest'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: x86_64-apple-darwin

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        uses: awalsh128/cache-apt-pkgs-action@v1.4.3
        with:
          packages: libdbus-1-dev libsoup-3.0-dev libjavascriptcoregtk-4.1-dev libwebkit2gtk-4.1-dev build-essential curl wget file libxdo-dev libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev gnome-video-effects gnome-video-effects-extra
          version: 1.1

      - name: Install dependencies
        run: npm ci

      - name: Build CLI
        run: npm run cli:build

      - name: Run CLI Test Suite
        run: npm test
        env:
          CI: true
          NODE_ENV: test

      - name: Test CLI Integration
        shell: bash
        run: |
          echo "Testing CLI integration with weekly.tw93.fun..."
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            timeout 120s node dist/cli.js https://weekly.tw93.fun --name "CITestWeekly" --debug || true
          else
            timeout 30s node dist/cli.js https://weekly.tw93.fun --name "CITestWeekly" --debug || true
          fi
          echo "Integration test completed (expected to timeout)"

  release-build-test:
    name: Release Build Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "npm"

      - name: Install Rust (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: x86_64-unknown-linux-gnu

      - name: Install Rust (Windows)
        if: matrix.os == 'windows-latest'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable-x86_64-msvc
          target: x86_64-pc-windows-msvc

      - name: Install Rust (macOS)
        if: matrix.os == 'macos-latest'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: x86_64-apple-darwin

      - name: Add macOS targets
        if: matrix.os == 'macos-latest'
        run: |
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        uses: awalsh128/cache-apt-pkgs-action@v1.4.3
        with:
          packages: libdbus-1-dev libsoup-3.0-dev libjavascriptcoregtk-4.1-dev libwebkit2gtk-4.1-dev build-essential curl wget file libxdo-dev libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev gnome-video-effects gnome-video-effects-extra
          version: 1.1

      - name: Install dependencies
        run: npm ci

      - name: Build CLI
        run: npm run cli:build

      - name: Run Release Build Test
        run: ./tests/release.js
        timeout-minutes: 30
        env:
          CI: true
          NODE_ENV: test

      - name: List generated files
        shell: bash
        run: |
          echo "Generated files in project root:"
          find . -maxdepth 1 \( -name "*.dmg" -o -name "*.app" -o -name "*.msi" -o -name "*.deb" -o -name "*.AppImage" \) || echo "No direct output files found"
          echo ""
          echo "Generated files in target directories:"
          find src-tauri/target -name "*.dmg" -o -name "*.app" -o -name "*.msi" -o -name "*.deb" -o -name "*.AppImage" 2>/dev/null || echo "No target output files found"

  summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs: [formatting, rust-quality, cli-tests, release-build-test]
    if: always()
    steps:
      - name: Generate Summary
        run: |
          echo "# 🎯 Quality & Testing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.formatting.result }}" == "success" ]; then
            echo "✅ **Code Formatting**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Code Formatting**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.rust-quality.result }}" == "success" ]; then
            echo "✅ **Rust Quality**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Rust Quality**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.cli-tests.result }}" == "success" ]; then
            echo "✅ **CLI Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **CLI Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.release-build-test.result }}" == "success" ]; then
            echo "✅ **Release Build Test**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Release Build Test**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
